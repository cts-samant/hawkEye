<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Load_Store_Terminal_Data" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Path" elementType="Argument">
            <stringProp name="Argument.name">Path</stringProp>
            <stringProp name="Argument.value">../Scripts/gBeats/DunkinBrands</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Declare Variables " enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1357340037">URL_START_DATE</stringProp>
            <stringProp name="1638613410">URL_END_DATE</stringProp>
            <stringProp name="683298547">jdbcURLForDB</stringProp>
            <stringProp name="-891764799">dataBaseUserId</stringProp>
            <stringProp name="-1813836894">dataBasePwd</stringProp>
            <stringProp name="-1379259997">dataBaseDriver</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1955832949">
              <stringProp name="44961">-4h</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-524080442">jdbc:postgresql://localhost:5432/postgres?autoReconnect=true</stringProp>
              <stringProp name="757584761">postgres</stringProp>
              <stringProp name="1216985755">password</stringProp>
              <stringProp name="-1662518376">org.postgresql.Driver</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <stringProp name="TestPlan.comments">jdbc:postgresql://localhost:5432/hawkeye?autoReconnect=true</stringProp>
        </UserParameters>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select </stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">postgresCP</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://localhost:5432/postgres?autoReconnect=true</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">password</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">admin</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Dates in URL" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

def startDate = LocalDate.now().plusDays(-1).toString();
def endDate = LocalDate.now().toString();
def startDateTime = LocalDateTime.now().minusHours(1).format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;)).toString();
def endDateTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;)).toString();

 log.info(&quot;\n  ******* startDate: &quot; + startDate + &quot; endDate :&quot; + endDate + &quot;\n&quot;);
 log.info(&quot;\n  ******* startDateTime: &quot; + startDateTime + &quot; endDateTime :&quot; + endDateTime + &quot;\n&quot;);
 


 
  </stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="DunkinJSONFileToDB_JSR223 PostProcessor" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

import java.text.SimpleDateFormat
import java.time.LocalDateTime;
import java.util.logging.Logger
import groovy.sql.Sql
import java.sql.*

//begin

Logger log = Logger.getLogger(&quot;DunkinJSONFileToDB&quot;);
String strInputData = new File(&quot;${Path}//HostswithGroups.json&quot;).text
//read flow file content and parse it
def jsonSlurper = new JsonSlurper();
def respObj = jsonSlurper.parseText(strInputData)
//log.info(&quot;respObj=&quot; + respObj)

SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;);
LocalDateTime date = LocalDateTime.now();
log.info(&quot;date=&quot; + date)

def results = []
//use defined sql connection to create a batch
//SQL.mydb.withTransaction {

//}
// connect to db
def sqlConn = Sql.newInstance(vars.get(&quot;jdbcURLForDB&quot;),
        vars.get(&quot;dataBaseUserId&quot;),vars.get(&quot;dataBasePwd&quot;), vars.get(&quot;dataBaseDriver&quot;))
//  try {
def listGroups = respObj.getAt(&quot;groups&quot;);
def listhosts = respObj.getAt(&quot;hosts&quot;);

listGroups.each { groupRecordData -&gt;
    groupname = groupRecordData.name;
    id = groupRecordData.id;

    listhosts.each { recordData -&gt;
        if (id == recordData.groupid) {
            groupid = recordData.groupid;
            description = recordData.description;
            terminalid = recordData.id;
            isHostOnline = recordData.isHostOnline;
            hostStateChangeDate = recordData.hostStateChangeDate;

            storeid = &quot;&quot;;
            terminaltype = &quot;&quot;;
            log.info(&quot;description=&quot; + description);

            if (description.startsWith(&quot;WSKDS&quot;)) {
                storeid = description.substring(8, 14);
                terminaltype = description.substring(2, 5);
                log.info(&quot;storeid=&quot; + storeid);
                log.info(&quot;terminaltype=&quot; + terminaltype);
            } else if (description.length() &gt; 11 &amp;&amp; &quot;POS&quot;.equals(description.substring(8, 11))) {
                storeid = description.substring(2, 8);
                terminaltype = description.substring(8, 11);
                log.info(&quot;storeid=&quot; + storeid);
                log.info(&quot;terminaltype=&quot; + terminaltype);
            } else {
                storeid = description;
                terminaltype = &quot;UAT&quot;;
                log.info(&quot;storeid=&quot; + storeid);
                log.info(&quot;terminaltype=&quot; + terminaltype);
            }

            /*System.out.println(&quot;groupid=&quot; + groupid + &quot;description=&quot; + description + &quot;terminalid=&quot; + terminalid + &quot;isHostOnline=&quot;
                    + isHostOnline + &quot;hostStateChangeDate=&quot; + hostStateChangeDate + &quot;id==&quot; + id + &quot;groupname==&quot; + groupname);*/
            String ls_SQL = &quot;INSERT INTO dms_store_terminal_data (store_id,group_id,group_name,terminal_id,terminal_desc,hoststatechangedate,&quot; +
                    &quot;ishostonline,terminal_type,createts,modifyts) VALUES&quot; +
                    &quot;(&apos;&quot; + storeid + &quot;&apos;,&quot; +
                    &quot;&apos;&quot; + groupid + &quot;&apos;,&quot; +
                    &quot;&apos;&quot; + groupname + &quot;&apos;,&quot; +
                    &quot;&apos;&quot; + terminalid + &quot;&apos;,&quot; +
                    &quot;&apos;&quot; + description + &quot;&apos;,&quot; +
                    &quot;&apos;&quot; + hostStateChangeDate + &quot;&apos;,&quot; +
                    &quot;&apos;&quot; + isHostOnline + &quot;&apos;,&quot; +
                    &quot;&apos;&quot; + terminaltype + &quot;&apos;,&quot; +
                    &quot;&apos;&quot; + date + &quot;&apos;,&quot; +
                    &quot;&apos;&quot; + date + &quot;&apos; ) ON CONFLICT DO NOTHING ;&quot;

            log.info(&quot;\n ls_SQL &quot; + ls_SQL);
            //log.info(&quot;\n ls_SQL &quot; + ls_SQL);
            try{
                sqlConn.execute(ls_SQL);
            }catch (Exception e){
                log.info(&quot;\n Error Loading data for &quot; + ls_SQL);
                log.info(&quot;........................................&quot;);
            }
        }
    }
}
sqlConn.close();
log.info(&quot;\n\n &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; &quot;);
</stringProp>
        </JSR223PostProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate eventDate " enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.*;
SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

int iReduceDaysBy =Integer.parseInt(vars.get(&quot;RandomDays&quot;)); 

Calendar cal = Calendar.getInstance();
cal.setTime(new Date()); // Now use today date.
 
cal.add(Calendar.DATE, - iReduceDaysBy); // Adding/subtracting days
vars.put(&quot;createTs&quot;,dateFormat.format(cal.getTime()));

//log.info(&quot;\n\n \n\n ----------- createTs  :&quot; +  vars.get(&quot;createTs&quot; ));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LoopCount" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${InsertSqlCount}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Execute InsertStatements" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">List&lt;String&gt; sqlQueryList = new ArrayList(); 
sqlQueryList = vars.getObject(&quot;InsertSqlList&quot;);

log.info (&quot;sqlQueryList.get &quot; + sqlQueryList.get(${LoopCount}) );
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Insert into Table  Customers" enabled="false">
            <stringProp name="dataSource">postgresCP</stringProp>
            <stringProp name="query">${InsertSQLs}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">20000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="ElasticSearch Listener" enabled="false">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="graphiteMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">graphiteMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.graphite.TextGraphiteMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="graphiteHost" elementType="Argument">
                <stringProp name="Argument.name">graphiteHost</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="graphitePort" elementType="Argument">
                <stringProp name="Argument.name">graphitePort</stringProp>
                <stringProp name="Argument.value">2003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rootMetricsPrefix" elementType="Argument">
                <stringProp name="Argument.name">rootMetricsPrefix</stringProp>
                <stringProp name="Argument.value">jmeter.</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersList" elementType="Argument">
                <stringProp name="Argument.name">samplersList</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">90;95;99</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.scheme" elementType="Argument">
                <stringProp name="Argument.name">es.scheme</stringProp>
                <stringProp name="Argument.value">http</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.ssl.keystore.path" elementType="Argument">
                <stringProp name="Argument.name">es.ssl.keystore.path</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.test.mode" elementType="Argument">
                <stringProp name="Argument.name">es.test.mode</stringProp>
                <stringProp name="Argument.value">info</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.ssl.keystore.pw" elementType="Argument">
                <stringProp name="Argument.name">es.ssl.keystore.pw</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.bulk.size" elementType="Argument">
                <stringProp name="Argument.name">es.bulk.size</stringProp>
                <stringProp name="Argument.value">100</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.aws.endpoint" elementType="Argument">
                <stringProp name="Argument.name">es.aws.endpoint</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.aws.region" elementType="Argument">
                <stringProp name="Argument.name">es.aws.region</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.port" elementType="Argument">
                <stringProp name="Argument.name">es.port</stringProp>
                <stringProp name="Argument.value">9200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.parse.all.res.headers" elementType="Argument">
                <stringProp name="Argument.name">es.parse.all.res.headers</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.xpack.password" elementType="Argument">
                <stringProp name="Argument.name">es.xpack.password</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.timestamp" elementType="Argument">
                <stringProp name="Argument.name">es.timestamp</stringProp>
                <stringProp name="Argument.value">yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZZ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.ssl.truststore.pw" elementType="Argument">
                <stringProp name="Argument.name">es.ssl.truststore.pw</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.host" elementType="Argument">
                <stringProp name="Argument.name">es.host</stringProp>
                <stringProp name="Argument.value">localhost</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.timout.ms" elementType="Argument">
                <stringProp name="Argument.name">es.timout.ms</stringProp>
                <stringProp name="Argument.value">200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.xpack.user" elementType="Argument">
                <stringProp name="Argument.name">es.xpack.user</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.index" elementType="Argument">
                <stringProp name="Argument.name">es.index</stringProp>
                <stringProp name="Argument.value">jMeterResults</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.fields" elementType="Argument">
                <stringProp name="Argument.name">es.fields</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.ssl.truststore.path" elementType="Argument">
                <stringProp name="Argument.name">es.ssl.truststore.path</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.parse.all.req.headers" elementType="Argument">
                <stringProp name="Argument.name">es.parse.all.req.headers</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es.sample.filter" elementType="Argument">
                <stringProp name="Argument.name">es.sample.filter</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.graphite.GraphiteBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
